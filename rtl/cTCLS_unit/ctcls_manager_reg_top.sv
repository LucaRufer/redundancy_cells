// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Top module auto-generated by `reggen`

`include "common_cells/assertions.svh"

module ctcls_manager_reg_top #(
  parameter type reg_req_t = logic,
  parameter type reg_rsp_t = logic
) (
  input clk_i,
  input rst_ni,

  // Below Register interface can be changed
  input  reg_req_t reg_req_i,
  output reg_rsp_t reg_rsp_o,
  // To HW
  output ctcls_manager_reg_pkg::ctcls_manager_reg2hw_t reg2hw, // Write
  input  ctcls_manager_reg_pkg::ctcls_manager_hw2reg_t hw2reg, // Read

  // Config
  input devmode_i // If 1, explicit error return for unmapped register access
);

  import ctcls_manager_reg_pkg::* ;

  localparam int AW = 4;
  localparam int DW = 32;
  localparam int DBW = DW/8;                    // Byte Width

  // register signals
  logic           reg_we;
  logic           reg_re;
  logic [AW-1:0]  reg_addr;
  logic [DW-1:0]  reg_wdata;
  logic [DBW-1:0] reg_be;
  logic [DW-1:0]  reg_rdata;
  logic           reg_error;

  logic          addrmiss, wr_err;

  logic [DW-1:0] reg_rdata_next;

  reg_req_t reg_intf_req;
  reg_rsp_t reg_intf_rsp;

  assign reg_intf_req = reg_req_i;
  assign reg_rsp_o = reg_intf_rsp;

  assign reg_we = reg_intf_req.valid & reg_intf_req.write;
  assign reg_re = reg_intf_req.valid & ~reg_intf_req.write;
  assign reg_addr = reg_intf_req.addr;
  assign reg_wdata = reg_intf_req.wdata;
  assign reg_be = reg_intf_req.wstrb;
  assign reg_intf_rsp.rdata = reg_rdata;
  assign reg_intf_rsp.error = reg_error;
  assign reg_intf_rsp.ready = 1'b1;

  assign reg_rdata = reg_rdata_next ;
  assign reg_error = (devmode_i & addrmiss) | wr_err ;

  // Define SW related signals
  // Format: <reg>_<field>_{wd|we|qs}
  //        or <reg>_{wd|we|qs} if field == 1 or 0
  logic mode_mode_wd;
  logic mode_mode_we;
  logic mode_restore_mode_wd;
  logic mode_restore_mode_we;
  logic [31:0] mismatches_0_qs;
  logic [31:0] mismatches_0_wd;
  logic mismatches_0_we;
  logic [31:0] mismatches_1_qs;
  logic [31:0] mismatches_1_wd;
  logic mismatches_1_we;
  logic [31:0] mismatches_2_qs;
  logic [31:0] mismatches_2_wd;
  logic mismatches_2_we;

  // Register instances
  // R[mode]: V(False)

  //   F[mode]: 0:0
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_mode_mode (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (mode_mode_we),
    .wd     (mode_mode_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mode.mode.q ),

    .qs     ()
  );


  //   F[restore_mode]: 8:8
  prim_subreg #(
    .DW      (1),
    .SWACCESS("WO"),
    .RESVAL  (1'h0)
  ) u_mode_restore_mode (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (mode_restore_mode_we),
    .wd     (mode_restore_mode_wd),

    // from internal hardware
    .de     (1'b0),
    .d      ('0  ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mode.restore_mode.q ),

    .qs     ()
  );


  // R[mismatches_0]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("W0C"),
    .RESVAL  (32'h0)
  ) u_mismatches_0 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (mismatches_0_we),
    .wd     (mismatches_0_wd),

    // from internal hardware
    .de     (hw2reg.mismatches_0.de),
    .d      (hw2reg.mismatches_0.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mismatches_0.q ),

    // to register interface (read)
    .qs     (mismatches_0_qs)
  );


  // R[mismatches_1]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("W0C"),
    .RESVAL  (32'h0)
  ) u_mismatches_1 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (mismatches_1_we),
    .wd     (mismatches_1_wd),

    // from internal hardware
    .de     (hw2reg.mismatches_1.de),
    .d      (hw2reg.mismatches_1.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mismatches_1.q ),

    // to register interface (read)
    .qs     (mismatches_1_qs)
  );


  // R[mismatches_2]: V(False)

  prim_subreg #(
    .DW      (32),
    .SWACCESS("W0C"),
    .RESVAL  (32'h0)
  ) u_mismatches_2 (
    .clk_i   (clk_i    ),
    .rst_ni  (rst_ni  ),

    // from register interface
    .we     (mismatches_2_we),
    .wd     (mismatches_2_wd),

    // from internal hardware
    .de     (hw2reg.mismatches_2.de),
    .d      (hw2reg.mismatches_2.d ),

    // to internal hardware
    .qe     (),
    .q      (reg2hw.mismatches_2.q ),

    // to register interface (read)
    .qs     (mismatches_2_qs)
  );




  logic [3:0] addr_hit;
  always_comb begin
    addr_hit = '0;
    addr_hit[0] = (reg_addr == CTCLS_MANAGER_MODE_OFFSET);
    addr_hit[1] = (reg_addr == CTCLS_MANAGER_MISMATCHES_0_OFFSET);
    addr_hit[2] = (reg_addr == CTCLS_MANAGER_MISMATCHES_1_OFFSET);
    addr_hit[3] = (reg_addr == CTCLS_MANAGER_MISMATCHES_2_OFFSET);
  end

  assign addrmiss = (reg_re || reg_we) ? ~|addr_hit : 1'b0 ;

  // Check sub-word write is permitted
  always_comb begin
    wr_err = 1'b0;
    if (addr_hit[0] && reg_we && (CTCLS_MANAGER_PERMIT[0] != (CTCLS_MANAGER_PERMIT[0] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[1] && reg_we && (CTCLS_MANAGER_PERMIT[1] != (CTCLS_MANAGER_PERMIT[1] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[2] && reg_we && (CTCLS_MANAGER_PERMIT[2] != (CTCLS_MANAGER_PERMIT[2] & reg_be))) wr_err = 1'b1 ;
    if (addr_hit[3] && reg_we && (CTCLS_MANAGER_PERMIT[3] != (CTCLS_MANAGER_PERMIT[3] & reg_be))) wr_err = 1'b1 ;
  end

  assign mode_mode_we = addr_hit[0] & reg_we & ~wr_err;
  assign mode_mode_wd = reg_wdata[0];

  assign mode_restore_mode_we = addr_hit[0] & reg_we & ~wr_err;
  assign mode_restore_mode_wd = reg_wdata[8];

  assign mismatches_0_we = addr_hit[1] & reg_we & ~wr_err;
  assign mismatches_0_wd = reg_wdata[31:0];

  assign mismatches_1_we = addr_hit[2] & reg_we & ~wr_err;
  assign mismatches_1_wd = reg_wdata[31:0];

  assign mismatches_2_we = addr_hit[3] & reg_we & ~wr_err;
  assign mismatches_2_wd = reg_wdata[31:0];

  // Read data return
  always_comb begin
    reg_rdata_next = '0;
    unique case (1'b1)
      addr_hit[0]: begin
        reg_rdata_next[0] = '0;
        reg_rdata_next[8] = '0;
      end

      addr_hit[1]: begin
        reg_rdata_next[31:0] = mismatches_0_qs;
      end

      addr_hit[2]: begin
        reg_rdata_next[31:0] = mismatches_1_qs;
      end

      addr_hit[3]: begin
        reg_rdata_next[31:0] = mismatches_2_qs;
      end

      default: begin
        reg_rdata_next = '1;
      end
    endcase
  end

  // Assertions for Register Interface

  `ASSERT(en2addrHit, (reg_we || reg_re) |-> $onehot0(addr_hit))


endmodule
